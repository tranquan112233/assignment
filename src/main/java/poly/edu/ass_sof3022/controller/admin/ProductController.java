package poly.edu.ass_sof3022.controller.admin;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import poly.edu.ass_sof3022.dao.CategoryDAO;
import poly.edu.ass_sof3022.dao.ProductDAO;
import poly.edu.ass_sof3022.dao.SupplierDAO;
import poly.edu.ass_sof3022.model.Category;
import poly.edu.ass_sof3022.model.Product;
import poly.edu.ass_sof3022.model.Supplier;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

@Controller
@RequestMapping("/admin/products")
public class ProductController {
    @Autowired
    ProductDAO dao;

    @Autowired
    CategoryDAO categoryDAO;

    @Autowired
    SupplierDAO supplierDAO;

    @GetMapping
    public String listProducts(Model model,
                               @RequestParam(defaultValue = "0") int page,
                               @RequestParam(defaultValue = "10") int size,
                               @RequestParam(required = false) String keyword) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Product> productPage;

        if (keyword != null && !keyword.trim().isEmpty()) {
            productPage = dao.findAllWithRelations(keyword, pageable);
        } else {
            productPage = dao.findAll(pageable);
        }

        model.addAttribute("products", productPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", productPage.getTotalPages());
        model.addAttribute("keyword", keyword);

        Product product = new Product();
        product.setCategory(new Category());
        product.setSupplier(new Supplier());
        model.addAttribute("product", product);

        // Load danh m·ª•c & nh√† cung c·∫•p cho select box
        model.addAttribute("categories", categoryDAO.findAll());
        model.addAttribute("suppliers", supplierDAO.findAll());

        return "admin/products/index";
    }

    // üíæ L∆ØU (TH√äM HO·∫∂C C·∫¨P NH·∫¨T) v·ªõi th√¥ng b√°o
    @PostMapping("/save")
    public String saveProduct(@ModelAttribute("product") Product product,
                              @RequestParam("imageFile") MultipartFile file,
                              RedirectAttributes redirectAttributes) {
        try {
            String uploadDir = "src/main/resources/static/uploads/";
            File dir = new File(uploadDir);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            // N·∫øu c√≥ file m·ªõi ƒë∆∞·ª£c upload
            if (!file.isEmpty()) {
                // N·∫øu l√† c·∫≠p nh·∫≠t -> x√≥a ·∫£nh c≈©
                if (product.getId() != null) {
                    Optional<Product> oldProductOpt = dao.findById(product.getId());
                    if (oldProductOpt.isPresent()) {
                        Product oldProduct = oldProductOpt.get();
                        if (oldProduct.getImage() != null) {
                            File oldFile = new File(uploadDir + oldProduct.getImage());
                            if (oldFile.exists()) oldFile.delete(); // X√≥a ·∫£nh c≈©
                        }
                    }
                }

                // T·∫°o t√™n file duy nh·∫•t ƒë·ªÉ tr√°nh tr√πng
                String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
                Path filePath = Paths.get(uploadDir + fileName);
                Files.write(filePath, file.getBytes());

                product.setImage(fileName);

            } else {
                // N·∫øu kh√¥ng ch·ªçn ·∫£nh m·ªõi khi s·ª≠a, gi·ªØ l·∫°i ·∫£nh c≈©
                if (product.getId() != null) {
                    Optional<Product> existing = dao.findById(product.getId());
                    existing.ifPresent(p -> product.setImage(p.getImage()));
                }
            }

            dao.save(product);
            redirectAttributes.addFlashAttribute("successMessage", "L∆∞u s·∫£n ph·∫©m th√†nh c√¥ng!");

        } catch (IOException e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói khi l∆∞u s·∫£n ph·∫©m!");
        }

        return "redirect:/admin/products";
    }

    // ‚úèÔ∏è S·ª¨A - HI·ªÇN TH·ªä L√äN FORM
    @GetMapping("/edit/{id}")
    public String editProduct(@PathVariable("id") Integer id, Model model,
                              @RequestParam(defaultValue = "0") int page,
                              @RequestParam(defaultValue = "10") int size) {

        Optional<Product> optional = dao.findById(id);
        Product product = optional.orElseGet(Product::new);

        Page<Product> productPage = dao.findAll(PageRequest.of(page, size));
        model.addAttribute("products", productPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", productPage.getTotalPages());
        model.addAttribute("product", product);

        model.addAttribute("categories", categoryDAO.findAll());
        model.addAttribute("suppliers", supplierDAO.findAll());

        return "admin/products/index";
    }

    // ‚ùå X√ìA (k√®m x√≥a ·∫£nh) + th√¥ng b√°o
    @GetMapping("/delete/{id}")
    public String deleteProduct(@PathVariable("id") Integer id,
                                RedirectAttributes redirectAttributes) {
        String uploadDir = "src/main/resources/static/uploads/";

        Optional<Product> productOpt = dao.findById(id);
        if (productOpt.isPresent()) {
            Product product = productOpt.get();

            // X√≥a file ·∫£nh n·∫øu t·ªìn t·∫°i
            if (product.getImage() != null) {
                File imageFile = new File(uploadDir + product.getImage());
                if (imageFile.exists()) imageFile.delete();
            }

            dao.delete(product);
            redirectAttributes.addFlashAttribute("successMessage", "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
        } else {
            redirectAttributes.addFlashAttribute("errorMessage", "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
        }

        return "redirect:/admin/products";
    }
}
